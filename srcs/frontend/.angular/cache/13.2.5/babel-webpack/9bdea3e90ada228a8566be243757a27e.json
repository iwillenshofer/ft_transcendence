{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.popup = null;\n  }\n\n  initLoginFlowInPopup() {\n    return new Promise(asyncAuthFlow);\n  }\n\n  asyncAuthFlow(resolve, reject) {\n    this.popup = this.createPopupWindow();\n    let checkForPopupClosedTimer;\n\n    const checkForPopupClosed = () => {\n      if (!this.popup || this.popup.closed) {\n        console.log('popup_closed');\n        resolve(1);\n      }\n    };\n\n    if (!this.popup) {\n      console.log('popup_blocked');\n      resolve(1);\n    } else {\n      checkForPopupClosedTimer = window.setInterval(checkForPopupClosed, 1000);\n    }\n\n    console.log(\"hello\");\n    return;\n  }\n\n  createPopupWindow() {\n    let win;\n    const url = '/login';\n    const h = 500;\n    const w = 330;\n    const title = 'windowtitle';\n    const parentX = window.top ? window.top.screenX : 0;\n    const parentY = window.top ? window.top.screenY : 0;\n    const parentHeight = window.top ? window.top.outerHeight : h;\n    const parentWidth = window.top ? window.top.outerWidth : w;\n    const childX = parentWidth / 2 + parentX - h / 2;\n    const childY = parentHeight / 2 + parentY - h / 2;\n    win = window.open(url, title, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${childY}, left=${childX}`);\n    win === null || win === void 0 ? void 0 : win.addEventListener('message', this.closedPopup.bind(this), false);\n    win === null || win === void 0 ? void 0 : win.addEventListener('unload', this.closedPopup.bind(this), false);\n    return win;\n  }\n\n  closedPopup(evt) {\n    console.log(evt);\n  }\n\n  initLoginFlowInPopupXXX() {\n    let windowRef = null;\n    return new Promise((resolve, reject) => {\n      /**\n       * Error handling section\n       */\n      const checkForPopupClosedInterval = 500;\n      let windowRef = null; // If we got no window reference we open a window\n      // else we are using the window already opened\n\n      if (!windowRef) {\n        windowRef == window.open('http://google.com', 'loginwindow', `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=100, height=100, top=0, left=0`);\n      } else if (windowRef && !windowRef.closed) {\n        windowRef = windowRef;\n        windowRef.location.href = 'http://google.com';\n      }\n\n      let checkForPopupClosedTimer;\n\n      const tryLogin = hash => {\n        this.tryLogin('hello').then(() => {\n          cleanup();\n          resolve(true);\n        }, err => {\n          cleanup();\n          reject(err);\n        });\n      };\n\n      const checkForPopupClosed = () => {\n        if (!windowRef || windowRef.closed) {\n          cleanup();\n          console.log('popup_closed');\n          reject(3);\n        }\n      };\n\n      if (!windowRef) {\n        console.log('popup_blocked');\n        reject(2);\n      } else {\n        checkForPopupClosedTimer = window.setInterval(checkForPopupClosed, checkForPopupClosedInterval);\n      }\n\n      const cleanup = () => {\n        window.clearInterval(checkForPopupClosedTimer);\n        window.removeEventListener('storage', storageListener);\n        window.removeEventListener('message', listener);\n\n        if (windowRef !== null) {\n          windowRef.close();\n        }\n\n        windowRef = null;\n      };\n\n      const listener = e => {\n        const message = this.processMessageEventMessage(e);\n\n        if (message && message !== null) {\n          window.removeEventListener('storage', storageListener);\n          tryLogin(message);\n        } else {\n          console.log('false event firing');\n        }\n      };\n\n      const storageListener = event => {\n        if (event.key === 'auth_hash') {\n          window.removeEventListener('message', listener);\n          tryLogin('message');\n        }\n      };\n\n      window.addEventListener('message', listener);\n      window.addEventListener('storage', storageListener);\n    });\n  }\n\n  tryLogin(v) {\n    return Promise.reject(0);\n  }\n\n  processMessageEventMessage(e) {\n    let expectedPrefix = '#';\n\n    if (!e || !e.data || typeof e.data !== 'string') {\n      return \"\";\n    }\n\n    const prefixedMessage = e.data;\n\n    if (!prefixedMessage.startsWith(expectedPrefix)) {\n      return \"\";\n    }\n\n    return '#' + prefixedMessage.substr(expectedPrefix.length);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)();\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/frontend/src/app/auth/auth.service.ts"],"names":["i0","AuthService","constructor","popup","initLoginFlowInPopup","Promise","asyncAuthFlow","resolve","reject","createPopupWindow","checkForPopupClosedTimer","checkForPopupClosed","closed","console","log","window","setInterval","win","url","h","w","title","parentX","top","screenX","parentY","screenY","parentHeight","outerHeight","parentWidth","outerWidth","childX","childY","open","addEventListener","closedPopup","bind","evt","initLoginFlowInPopupXXX","windowRef","checkForPopupClosedInterval","location","href","tryLogin","hash","then","cleanup","err","clearInterval","removeEventListener","storageListener","listener","close","e","message","processMessageEventMessage","event","key","v","expectedPrefix","data","prefixedMessage","startsWith","substr","length","ɵfac","AuthService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\nexport class AuthService {\n    constructor() {\n        this.popup = null;\n    }\n    initLoginFlowInPopup() {\n        return new Promise(asyncAuthFlow);\n    }\n    asyncAuthFlow(resolve, reject) {\n        this.popup = this.createPopupWindow();\n        let checkForPopupClosedTimer;\n        const checkForPopupClosed = () => {\n            if (!this.popup || this.popup.closed) {\n                console.log('popup_closed');\n                resolve(1);\n            }\n        };\n        if (!this.popup) {\n            console.log('popup_blocked');\n            resolve(1);\n        }\n        else {\n            checkForPopupClosedTimer = window.setInterval(checkForPopupClosed, 1000);\n        }\n        console.log(\"hello\");\n        return;\n    }\n    createPopupWindow() {\n        let win;\n        const url = '/login';\n        const h = 500;\n        const w = 330;\n        const title = 'windowtitle';\n        const parentX = window.top ? window.top.screenX : 0;\n        const parentY = window.top ? window.top.screenY : 0;\n        const parentHeight = window.top ? window.top.outerHeight : h;\n        const parentWidth = window.top ? window.top.outerWidth : w;\n        const childX = parentWidth / 2 + parentX - (h / 2);\n        const childY = parentHeight / 2 + parentY - (h / 2);\n        win = window.open(url, title, `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=${w}, height=${h}, top=${childY}, left=${childX}`);\n        win === null || win === void 0 ? void 0 : win.addEventListener('message', this.closedPopup.bind(this), false);\n        win === null || win === void 0 ? void 0 : win.addEventListener('unload', this.closedPopup.bind(this), false);\n        return (win);\n    }\n    closedPopup(evt) {\n        console.log(evt);\n    }\n    initLoginFlowInPopupXXX() {\n        let windowRef = null;\n        return new Promise((resolve, reject) => {\n            /**\n             * Error handling section\n             */\n            const checkForPopupClosedInterval = 500;\n            let windowRef = null;\n            // If we got no window reference we open a window\n            // else we are using the window already opened\n            if (!windowRef) {\n                windowRef == window.open('http://google.com', 'loginwindow', `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, width=100, height=100, top=0, left=0`);\n            }\n            else if (windowRef && !windowRef.closed) {\n                windowRef = windowRef;\n                windowRef.location.href = 'http://google.com';\n            }\n            let checkForPopupClosedTimer;\n            const tryLogin = (hash) => {\n                this.tryLogin('hello').then(() => {\n                    cleanup();\n                    resolve(true);\n                }, (err) => {\n                    cleanup();\n                    reject(err);\n                });\n            };\n            const checkForPopupClosed = () => {\n                if (!windowRef || windowRef.closed) {\n                    cleanup();\n                    console.log('popup_closed');\n                    reject(3);\n                }\n            };\n            if (!windowRef) {\n                console.log('popup_blocked');\n                reject(2);\n            }\n            else {\n                checkForPopupClosedTimer = window.setInterval(checkForPopupClosed, checkForPopupClosedInterval);\n            }\n            const cleanup = () => {\n                window.clearInterval(checkForPopupClosedTimer);\n                window.removeEventListener('storage', storageListener);\n                window.removeEventListener('message', listener);\n                if (windowRef !== null) {\n                    windowRef.close();\n                }\n                windowRef = null;\n            };\n            const listener = (e) => {\n                const message = this.processMessageEventMessage(e);\n                if (message && message !== null) {\n                    window.removeEventListener('storage', storageListener);\n                    tryLogin(message);\n                }\n                else {\n                    console.log('false event firing');\n                }\n            };\n            const storageListener = (event) => {\n                if (event.key === 'auth_hash') {\n                    window.removeEventListener('message', listener);\n                    tryLogin('message');\n                }\n            };\n            window.addEventListener('message', listener);\n            window.addEventListener('storage', storageListener);\n        });\n    }\n    tryLogin(v) {\n        return Promise.reject(0);\n    }\n    processMessageEventMessage(e) {\n        let expectedPrefix = '#';\n        if (!e || !e.data || typeof e.data !== 'string') {\n            return \"\";\n        }\n        const prefixedMessage = e.data;\n        if (!prefixedMessage.startsWith(expectedPrefix)) {\n            return \"\";\n        }\n        return '#' + prefixedMessage.substr(expectedPrefix.length);\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}